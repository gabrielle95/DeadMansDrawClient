/**
 * SLHPC23 Arena
 * **SAP Labs Hungary Programming Competition 2023 Arena server**.  You can find more information about the game and the competititon rules at [github/SLH_SPC_2022](https://github.com/afarago/SLH_SPC_2022).   For a test run, you can use the crash test dummy user `000000000000000000000000/dummypass`.   *Note: All the APIs expect and return application/json*.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: DL SLHPC23 <DL_637A3F6466D808029A65636A@global.corp.sap>
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActionErrorResponse from '../model/ActionErrorResponse';
import DeleteMatchRequest from '../model/DeleteMatchRequest';
import ErrorResponse from '../model/ErrorResponse';
import IUserAction from '../model/IUserAction';
import MatchCreateResponse from '../model/MatchCreateResponse';
import MatchCreationParams from '../model/MatchCreationParams';
import MatchResponse from '../model/MatchResponse';
import PartialPickMatchEventActionResponseReturnedProps from '../model/PartialPickMatchEventActionResponseReturnedProps';

/**
* Game service.
* @module api/GameApi
* @version 1.0.0
*/
export default class GameApi {

    /**
    * Constructs a new GameApi. 
    * @alias module:api/GameApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Creates a new Match
     * Creates a new Match using the supplied parameters, leave empty for a default 'practice' Match.
     * @param {module:model/MatchCreationParams} matchCreationParams Match creation parameters including players, drawpile, discardpile, banks and randomseed
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MatchCreateResponse} and HTTP response
     */
    createMatchWithHttpInfo(matchCreationParams) {
      let postBody = matchCreationParams;
      // verify the required parameter 'matchCreationParams' is set
      if (matchCreationParams === undefined || matchCreationParams === null) {
        throw new Error("Missing the required parameter 'matchCreationParams' when calling createMatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MatchCreateResponse;
      return this.apiClient.callApi(
        '/api/matches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a new Match
     * Creates a new Match using the supplied parameters, leave empty for a default 'practice' Match.
     * @param {module:model/MatchCreationParams} matchCreationParams Match creation parameters including players, drawpile, discardpile, banks and randomseed
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MatchCreateResponse}
     */
    createMatch(matchCreationParams) {
      return this.createMatchWithHttpInfo(matchCreationParams)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Forceful central deletion of a Match e.g. when timeout
     * Forceful deletion of a match by Admin, e.g. when timeout
     * @param {String} id game id
     * @param {module:model/DeleteMatchRequest} deleteMatchRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteMatchWithHttpInfo(id, deleteMatchRequest) {
      let postBody = deleteMatchRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteMatch");
      }
      // verify the required parameter 'deleteMatchRequest' is set
      if (deleteMatchRequest === undefined || deleteMatchRequest === null) {
        throw new Error("Missing the required parameter 'deleteMatchRequest' when calling deleteMatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/matches/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Forceful central deletion of a Match e.g. when timeout
     * Forceful deletion of a match by Admin, e.g. when timeout
     * @param {String} id game id
     * @param {module:model/DeleteMatchRequest} deleteMatchRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteMatch(id, deleteMatchRequest) {
      return this.deleteMatchWithHttpInfo(id, deleteMatchRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Execute an Action for a Match
     * Execute an Action for an existing Match.  Supply the unique match ID and add Action details
     * @param {String} id 
     * @param {module:model/IUserAction} iUserAction Match action execution parameters
     * @param {Object} opts Optional parameters
     * @param {String} opts.wait optional waits with timeout executing the action - useful for waiting for other user to finish its action to avoid polling
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PartialPickMatchEventActionResponseReturnedProps>} and HTTP response
     */
    executeActionForMatchWithHttpInfo(id, iUserAction, opts) {
      opts = opts || {};
      let postBody = iUserAction;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling executeActionForMatch");
      }
      // verify the required parameter 'iUserAction' is set
      if (iUserAction === undefined || iUserAction === null) {
        throw new Error("Missing the required parameter 'iUserAction' when calling executeActionForMatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'wait': opts['wait']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [PartialPickMatchEventActionResponseReturnedProps];
      return this.apiClient.callApi(
        '/api/matches/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Execute an Action for a Match
     * Execute an Action for an existing Match.  Supply the unique match ID and add Action details
     * @param {String} id 
     * @param {module:model/IUserAction} iUserAction Match action execution parameters
     * @param {Object} opts Optional parameters
     * @param {String} opts.wait optional waits with timeout executing the action - useful for waiting for other user to finish its action to avoid polling
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PartialPickMatchEventActionResponseReturnedProps>}
     */
    executeActionForMatch(id, iUserAction, opts) {
      return this.executeActionForMatchWithHttpInfo(id, iUserAction, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves a Match details
     * Retrieves the details of an existing match.  Supply the unique match ID and receive corresponding match details.
     * @param {String} id The requested Match Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MatchResponse} and HTTP response
     */
    getMatchWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MatchResponse;
      return this.apiClient.callApi(
        '/api/matches/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves a Match details
     * Retrieves the details of an existing match.  Supply the unique match ID and receive corresponding match details.
     * @param {String} id The requested Match Id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MatchResponse}
     */
    getMatch(id) {
      return this.getMatchWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieves all Matches
     * Retrieves the details of all Matches.  Players will receive own matches only
     * @param {Object} opts Optional parameters
     * @param {String} opts.at optional filter parameter in the form of ISO date or 'today'
     * @param {String} opts.active optional filter matches where player is active at
     * @param {String} opts.tags optional filter matches with matching tag/comma separated list of tags
     * @param {String} opts.wait optional waits with timeout for any resulting match - useful for polling when the user receives invite for a new match to avoid polling
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/MatchResponse>} and HTTP response
     */
    getMatchesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'at': opts['at'],
        'active': opts['active'],
        'tags': opts['tags'],
        'wait': opts['wait']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MatchResponse];
      return this.apiClient.callApi(
        '/api/matches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves all Matches
     * Retrieves the details of all Matches.  Players will receive own matches only
     * @param {Object} opts Optional parameters
     * @param {String} opts.at optional filter parameter in the form of ISO date or 'today'
     * @param {String} opts.active optional filter matches where player is active at
     * @param {String} opts.tags optional filter matches with matching tag/comma separated list of tags
     * @param {String} opts.wait optional waits with timeout for any resulting match - useful for polling when the user receives invite for a new match to avoid polling
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/MatchResponse>}
     */
    getMatches(opts) {
      return this.getMatchesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
