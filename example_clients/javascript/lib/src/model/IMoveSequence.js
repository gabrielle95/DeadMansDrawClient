/**
 * SLHPC23 Arena
 * **SAP Labs Hungary Programming Competition 2023 Arena server**.  You can find more information about the game and the competititon rules at [github/SLH_SPC_2022](https://github.com/afarago/SLH_SPC_2022).   For a test run, you can use the crash test dummy user `000000000000000000000000/dummypass`.   *Note: All the APIs expect and return application/json*.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: DL SLHPC23 <DL_637A3F6466D808029A65636A@global.corp.sap>
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IMoveSequence model module.
 * @module model/IMoveSequence
 * @version 1.0.0
 */
class IMoveSequence {
    /**
     * Constructs a new <code>IMoveSequence</code>.
     * @alias module:model/IMoveSequence
     * @param sequenceId {Number} 
     * @param turnId {Number} 
     * @param sequenceInTurnId {Number} 
     */
    constructor(sequenceId, turnId, sequenceInTurnId) { 
        
        IMoveSequence.initialize(this, sequenceId, turnId, sequenceInTurnId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sequenceId, turnId, sequenceInTurnId) { 
        obj['sequenceId'] = sequenceId;
        obj['turnId'] = turnId;
        obj['sequenceInTurnId'] = sequenceInTurnId;
    }

    /**
     * Constructs a <code>IMoveSequence</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IMoveSequence} obj Optional instance to populate.
     * @return {module:model/IMoveSequence} The populated <code>IMoveSequence</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IMoveSequence();

            if (data.hasOwnProperty('sequenceId')) {
                obj['sequenceId'] = ApiClient.convertToType(data['sequenceId'], 'Number');
            }
            if (data.hasOwnProperty('turnId')) {
                obj['turnId'] = ApiClient.convertToType(data['turnId'], 'Number');
            }
            if (data.hasOwnProperty('sequenceInTurnId')) {
                obj['sequenceInTurnId'] = ApiClient.convertToType(data['sequenceInTurnId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IMoveSequence</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IMoveSequence</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IMoveSequence.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

IMoveSequence.RequiredProperties = ["sequenceId", "turnId", "sequenceInTurnId"];

/**
 * @member {Number} sequenceId
 */
IMoveSequence.prototype['sequenceId'] = undefined;

/**
 * @member {Number} turnId
 */
IMoveSequence.prototype['turnId'] = undefined;

/**
 * @member {Number} sequenceInTurnId
 */
IMoveSequence.prototype['sequenceInTurnId'] = undefined;






export default IMoveSequence;

