# coding: utf-8

"""
    SLHPC23 Arena

    **SAP Labs Hungary Programming Competition 2023 Arena server**.  You can find more information about the game and the competititon rules at [github/SLH_SPC_2022](https://github.com/afarago/SLH_SPC_2022).   For a test run, you can use the crash test dummy user `000000000000000000000000/dummypass`.   *Note: All the APIs expect and return application/json*.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: DL SLHPC23 <DL_637A3F6466D808029A65636A@global.corp.sap>
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class MatchResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'players': 'list[str]',
        'started_at': 'datetime',
        'move_count': 'int',
        'turn_count': 'int',
        'move_count_in_turn': 'int',
        'last_move_at': 'datetime',
        'created_by_player_id': 'str',
        'creation_params': 'MatchCreationParams',
        'current_player_id': 'str',
        'state': 'State'
    }

    attribute_map = {
        'id': '_id',
        'players': 'players',
        'started_at': 'startedAt',
        'move_count': 'moveCount',
        'turn_count': 'turnCount',
        'move_count_in_turn': 'moveCountInTurn',
        'last_move_at': 'lastMoveAt',
        'created_by_player_id': 'createdByPlayerId',
        'creation_params': 'creationParams',
        'current_player_id': 'currentPlayerId',
        'state': 'state'
    }

    def __init__(self, id=None, players=None, started_at=None, move_count=None, turn_count=None, move_count_in_turn=None, last_move_at=None, created_by_player_id=None, creation_params=None, current_player_id=None, state=None, local_vars_configuration=None):  # noqa: E501
        """MatchResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._players = None
        self._started_at = None
        self._move_count = None
        self._turn_count = None
        self._move_count_in_turn = None
        self._last_move_at = None
        self._created_by_player_id = None
        self._creation_params = None
        self._current_player_id = None
        self._state = None
        self.discriminator = None

        self.id = id
        self.players = players
        self.started_at = started_at
        self.move_count = move_count
        if turn_count is not None:
            self.turn_count = turn_count
        self.move_count_in_turn = move_count_in_turn
        self.last_move_at = last_move_at
        self.created_by_player_id = created_by_player_id
        if creation_params is not None:
            self.creation_params = creation_params
        self.current_player_id = current_player_id
        if state is not None:
            self.state = state

    @property
    def id(self):
        """Gets the id of this MatchResponse.  # noqa: E501

        A class representation of the BSON ObjectId type.  # noqa: E501

        :return: The id of this MatchResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MatchResponse.

        A class representation of the BSON ObjectId type.  # noqa: E501

        :param id: The id of this MatchResponse.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def players(self):
        """Gets the players of this MatchResponse.  # noqa: E501


        :return: The players of this MatchResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._players

    @players.setter
    def players(self, players):
        """Sets the players of this MatchResponse.


        :param players: The players of this MatchResponse.  # noqa: E501
        :type players: list[str]
        """
        if self.local_vars_configuration.client_side_validation and players is None:  # noqa: E501
            raise ValueError("Invalid value for `players`, must not be `None`")  # noqa: E501

        self._players = players

    @property
    def started_at(self):
        """Gets the started_at of this MatchResponse.  # noqa: E501


        :return: The started_at of this MatchResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this MatchResponse.


        :param started_at: The started_at of this MatchResponse.  # noqa: E501
        :type started_at: datetime
        """
        if self.local_vars_configuration.client_side_validation and started_at is None:  # noqa: E501
            raise ValueError("Invalid value for `started_at`, must not be `None`")  # noqa: E501

        self._started_at = started_at

    @property
    def move_count(self):
        """Gets the move_count of this MatchResponse.  # noqa: E501


        :return: The move_count of this MatchResponse.  # noqa: E501
        :rtype: int
        """
        return self._move_count

    @move_count.setter
    def move_count(self, move_count):
        """Sets the move_count of this MatchResponse.


        :param move_count: The move_count of this MatchResponse.  # noqa: E501
        :type move_count: int
        """
        if self.local_vars_configuration.client_side_validation and move_count is None:  # noqa: E501
            raise ValueError("Invalid value for `move_count`, must not be `None`")  # noqa: E501

        self._move_count = move_count

    @property
    def turn_count(self):
        """Gets the turn_count of this MatchResponse.  # noqa: E501


        :return: The turn_count of this MatchResponse.  # noqa: E501
        :rtype: int
        """
        return self._turn_count

    @turn_count.setter
    def turn_count(self, turn_count):
        """Sets the turn_count of this MatchResponse.


        :param turn_count: The turn_count of this MatchResponse.  # noqa: E501
        :type turn_count: int
        """

        self._turn_count = turn_count

    @property
    def move_count_in_turn(self):
        """Gets the move_count_in_turn of this MatchResponse.  # noqa: E501


        :return: The move_count_in_turn of this MatchResponse.  # noqa: E501
        :rtype: int
        """
        return self._move_count_in_turn

    @move_count_in_turn.setter
    def move_count_in_turn(self, move_count_in_turn):
        """Sets the move_count_in_turn of this MatchResponse.


        :param move_count_in_turn: The move_count_in_turn of this MatchResponse.  # noqa: E501
        :type move_count_in_turn: int
        """

        self._move_count_in_turn = move_count_in_turn

    @property
    def last_move_at(self):
        """Gets the last_move_at of this MatchResponse.  # noqa: E501


        :return: The last_move_at of this MatchResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._last_move_at

    @last_move_at.setter
    def last_move_at(self, last_move_at):
        """Sets the last_move_at of this MatchResponse.


        :param last_move_at: The last_move_at of this MatchResponse.  # noqa: E501
        :type last_move_at: datetime
        """
        if self.local_vars_configuration.client_side_validation and last_move_at is None:  # noqa: E501
            raise ValueError("Invalid value for `last_move_at`, must not be `None`")  # noqa: E501

        self._last_move_at = last_move_at

    @property
    def created_by_player_id(self):
        """Gets the created_by_player_id of this MatchResponse.  # noqa: E501


        :return: The created_by_player_id of this MatchResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_by_player_id

    @created_by_player_id.setter
    def created_by_player_id(self, created_by_player_id):
        """Sets the created_by_player_id of this MatchResponse.


        :param created_by_player_id: The created_by_player_id of this MatchResponse.  # noqa: E501
        :type created_by_player_id: str
        """

        self._created_by_player_id = created_by_player_id

    @property
    def creation_params(self):
        """Gets the creation_params of this MatchResponse.  # noqa: E501


        :return: The creation_params of this MatchResponse.  # noqa: E501
        :rtype: MatchCreationParams
        """
        return self._creation_params

    @creation_params.setter
    def creation_params(self, creation_params):
        """Sets the creation_params of this MatchResponse.


        :param creation_params: The creation_params of this MatchResponse.  # noqa: E501
        :type creation_params: MatchCreationParams
        """

        self._creation_params = creation_params

    @property
    def current_player_id(self):
        """Gets the current_player_id of this MatchResponse.  # noqa: E501


        :return: The current_player_id of this MatchResponse.  # noqa: E501
        :rtype: str
        """
        return self._current_player_id

    @current_player_id.setter
    def current_player_id(self, current_player_id):
        """Sets the current_player_id of this MatchResponse.


        :param current_player_id: The current_player_id of this MatchResponse.  # noqa: E501
        :type current_player_id: str
        """

        self._current_player_id = current_player_id

    @property
    def state(self):
        """Gets the state of this MatchResponse.  # noqa: E501


        :return: The state of this MatchResponse.  # noqa: E501
        :rtype: State
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MatchResponse.


        :param state: The state of this MatchResponse.  # noqa: E501
        :type state: State
        """

        self._state = state

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MatchResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MatchResponse):
            return True

        return self.to_dict() != other.to_dict()
