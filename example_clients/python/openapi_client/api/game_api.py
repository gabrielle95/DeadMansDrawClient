# coding: utf-8

"""
    SLHPC23 Arena

    **SAP Labs Hungary Programming Competition 2023 Arena server**.  You can find more information about the game and the competititon rules at [github/SLH_SPC_2022](https://github.com/afarago/SLH_SPC_2022).   For a test run, you can use the crash test dummy user `000000000000000000000000/dummypass`.   *Note: All the APIs expect and return application/json*.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: DL SLHPC23 <DL_637A3F6466D808029A65636A@global.corp.sap>
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class GameApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_match(self, match_creation_params, **kwargs):  # noqa: E501
        """Creates a new Match  # noqa: E501

        Creates a new Match using the supplied parameters, leave empty for a default 'practice' Match.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_match(match_creation_params, async_req=True)
        >>> result = thread.get()

        :param match_creation_params: Match creation parameters including players, drawpile, discardpile, banks and randomseed (required)
        :type match_creation_params: MatchCreationParams
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MatchCreateResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.create_match_with_http_info(match_creation_params, **kwargs)  # noqa: E501

    def create_match_with_http_info(self, match_creation_params, **kwargs):  # noqa: E501
        """Creates a new Match  # noqa: E501

        Creates a new Match using the supplied parameters, leave empty for a default 'practice' Match.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_match_with_http_info(match_creation_params, async_req=True)
        >>> result = thread.get()

        :param match_creation_params: Match creation parameters including players, drawpile, discardpile, banks and randomseed (required)
        :type match_creation_params: MatchCreationParams
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MatchCreateResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'match_creation_params'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_match" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'match_creation_params' is set
        if self.api_client.client_side_validation and local_var_params.get('match_creation_params') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `match_creation_params` when calling `create_match`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'match_creation_params' in local_var_params:
            body_params = local_var_params['match_creation_params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        response_types_map = {
            200: "MatchCreateResponse",
            400: "ErrorResponse",
            500: "ErrorResponse",
        }

        return self.api_client.call_api(
            '/api/matches', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def delete_match(self, id, delete_match_request, **kwargs):  # noqa: E501
        """Forceful central deletion of a Match e.g. when timeout  # noqa: E501

        Forceful deletion of a match by Admin, e.g. when timeout  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_match(id, delete_match_request, async_req=True)
        >>> result = thread.get()

        :param id: game id (required)
        :type id: str
        :param delete_match_request: (required)
        :type delete_match_request: DeleteMatchRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_match_with_http_info(id, delete_match_request, **kwargs)  # noqa: E501

    def delete_match_with_http_info(self, id, delete_match_request, **kwargs):  # noqa: E501
        """Forceful central deletion of a Match e.g. when timeout  # noqa: E501

        Forceful deletion of a match by Admin, e.g. when timeout  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_match_with_http_info(id, delete_match_request, async_req=True)
        >>> result = thread.get()

        :param id: game id (required)
        :type id: str
        :param delete_match_request: (required)
        :type delete_match_request: DeleteMatchRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'id',
            'delete_match_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_match" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and local_var_params.get('id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `delete_match`")  # noqa: E501
        # verify the required parameter 'delete_match_request' is set
        if self.api_client.client_side_validation and local_var_params.get('delete_match_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `delete_match_request` when calling `delete_match`")  # noqa: E501

        if self.api_client.client_side_validation and 'id' in local_var_params and not re.search(r'[0-9a-f]{24}|[0-9a-f]{12}', local_var_params['id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `id` when calling `delete_match`, must conform to the pattern `/[0-9a-f]{24}|[0-9a-f]{12}/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_match_request' in local_var_params:
            body_params = local_var_params['delete_match_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'DELETE', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        response_types_map = {}

        return self.api_client.call_api(
            '/api/matches/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def execute_action_for_match(self, id, i_user_action, **kwargs):  # noqa: E501
        """Execute an Action for a Match  # noqa: E501

        Execute an Action for an existing Match.  Supply the unique match ID and add Action details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.execute_action_for_match(id, i_user_action, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param i_user_action: Match action execution parameters (required)
        :type i_user_action: IUserAction
        :param wait: optional waits with timeout executing the action - useful for waiting for other user to finish its action to avoid polling
        :type wait: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[PartialPickMatchEventActionResponseReturnedProps]
        """
        kwargs['_return_http_data_only'] = True
        return self.execute_action_for_match_with_http_info(id, i_user_action, **kwargs)  # noqa: E501

    def execute_action_for_match_with_http_info(self, id, i_user_action, **kwargs):  # noqa: E501
        """Execute an Action for a Match  # noqa: E501

        Execute an Action for an existing Match.  Supply the unique match ID and add Action details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.execute_action_for_match_with_http_info(id, i_user_action, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param i_user_action: Match action execution parameters (required)
        :type i_user_action: IUserAction
        :param wait: optional waits with timeout executing the action - useful for waiting for other user to finish its action to avoid polling
        :type wait: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[PartialPickMatchEventActionResponseReturnedProps], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'i_user_action',
            'wait'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method execute_action_for_match" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and local_var_params.get('id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `execute_action_for_match`")  # noqa: E501
        # verify the required parameter 'i_user_action' is set
        if self.api_client.client_side_validation and local_var_params.get('i_user_action') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `i_user_action` when calling `execute_action_for_match`")  # noqa: E501

        if self.api_client.client_side_validation and 'id' in local_var_params and not re.search(r'[0-9a-f]{24}|[0-9a-f]{12}', local_var_params['id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `id` when calling `execute_action_for_match`, must conform to the pattern `/[0-9a-f]{24}|[0-9a-f]{12}/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if local_var_params.get('wait') is not None:  # noqa: E501
            query_params.append(('wait', local_var_params['wait']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        if 'i_user_action' in local_var_params:
            body_params = local_var_params['i_user_action']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        response_types_map = {
            200: "list[PartialPickMatchEventActionResponseReturnedProps]",
            401: "ErrorResponse",
            404: "ErrorResponse",
            409: "ErrorResponse",
            410: "ActionErrorResponse",
            500: "ErrorResponse",
        }

        return self.api_client.call_api(
            '/api/matches/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_match(self, id, **kwargs):  # noqa: E501
        """Retrieves a Match details  # noqa: E501

        Retrieves the details of an existing match.  Supply the unique match ID and receive corresponding match details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_match(id, async_req=True)
        >>> result = thread.get()

        :param id: The requested Match Id (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MatchResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_match_with_http_info(id, **kwargs)  # noqa: E501

    def get_match_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves a Match details  # noqa: E501

        Retrieves the details of an existing match.  Supply the unique match ID and receive corresponding match details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_match_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: The requested Match Id (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MatchResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_match" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and local_var_params.get('id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_match`")  # noqa: E501

        if self.api_client.client_side_validation and 'id' in local_var_params and not re.search(r'[0-9a-f]{24}|[0-9a-f]{12}', local_var_params['id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `id` when calling `get_match`, must conform to the pattern `/[0-9a-f]{24}|[0-9a-f]{12}/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        response_types_map = {
            200: "MatchResponse",
            401: "ErrorResponse",
            404: "ErrorResponse",
            500: "ErrorResponse",
        }

        return self.api_client.call_api(
            '/api/matches/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_matches(self, **kwargs):  # noqa: E501
        """Retrieves all Matches  # noqa: E501

        Retrieves the details of all Matches.  Players will receive own matches only  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_matches(async_req=True)
        >>> result = thread.get()

        :param at: optional filter parameter in the form of ISO date or 'today'
        :type at: str
        :param active: optional filter matches where player is active at
        :type active: str
        :param tags: optional filter matches with matching tag/comma separated list of tags
        :type tags: str
        :param wait: optional waits with timeout for any resulting match - useful for polling when the user receives invite for a new match to avoid polling
        :type wait: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[MatchResponse]
        """
        kwargs['_return_http_data_only'] = True
        return self.get_matches_with_http_info(**kwargs)  # noqa: E501

    def get_matches_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves all Matches  # noqa: E501

        Retrieves the details of all Matches.  Players will receive own matches only  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_matches_with_http_info(async_req=True)
        >>> result = thread.get()

        :param at: optional filter parameter in the form of ISO date or 'today'
        :type at: str
        :param active: optional filter matches where player is active at
        :type active: str
        :param tags: optional filter matches with matching tag/comma separated list of tags
        :type tags: str
        :param wait: optional waits with timeout for any resulting match - useful for polling when the user receives invite for a new match to avoid polling
        :type wait: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[MatchResponse], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'at',
            'active',
            'tags',
            'wait'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_matches" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('at') is not None:  # noqa: E501
            query_params.append(('at', local_var_params['at']))  # noqa: E501
        if local_var_params.get('active') is not None:  # noqa: E501
            query_params.append(('active', local_var_params['active']))  # noqa: E501
        if local_var_params.get('tags') is not None:  # noqa: E501
            query_params.append(('tags', local_var_params['tags']))  # noqa: E501
        if local_var_params.get('wait') is not None:  # noqa: E501
            query_params.append(('wait', local_var_params['wait']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        response_types_map = {
            200: "list[MatchResponse]",
        }

        return self.api_client.call_api(
            '/api/matches', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
